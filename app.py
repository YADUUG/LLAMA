import os
from flask import Flask, request, render_template, send_file
from docx import Document
from docx.shared import Pt
from huggingface_hub import InferenceClient

client = InferenceClient(token="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")

app = Flask(__name__)

def create_code_style(doc):
    """
    Create a style for code blocks.
    """
    styles = doc.styles
    try:
        new_style = styles.add_style('CodeStyle', 1)
        new_style.font.name = 'Courier New'
        new_style.font.size = Pt(10)
    except Exception as e:
        print(f"Style already exists: {e}")

def add_code_paragraph(doc, text):
    """
    Add a code block to the document without special formatting symbols.
    """
    paragraph = doc.add_paragraph(style='CodeStyle')
    run = paragraph.add_run(text)
    run.font.name = 'Courier New'
    run.font.size = Pt(10)

def create_project_docx(domain_name, code_type):
    """
    Create the project tasks in DOCX format based on domain and programming language.
    """
    doc = Document()
    create_code_style(doc)

    doc.add_heading(f'Solution of LeetCode - {domain_name}', 0)

    try:
        task_response = client.chat_completion(
            messages=[{"role": "user", "content": f"Solve this leetcode problem {domain_name} in {code_type} programming language and explain how you slove it in steps."}],
            max_tokens=10000
        )
        task_content = task_response['choices'][0]['message']['content']

        doc.add_heading('-- Generated by LLAMA 3 8B --', level=1)
        doc.add_paragraph(task_content)

        doc.add_heading('Programming Language', level=1)
        doc.add_paragraph(f"These code are written in {code_type}.")
        add_code_paragraph(doc, "--END--")

    except Exception as e:
        doc.add_paragraph("Error generating task content from API.")
        doc.add_paragraph(str(e))

    temp_dir = os.path.join(os.getcwd(), 'temp')
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)

    file_name = os.path.join(temp_dir, f'{domain_name}_{code_type}_Solution.docx')
    doc.save(file_name)

    return file_name

@app.route('/', methods=['GET', 'POST'])
def chat():
    if request.method == 'POST':
        domain_name = request.form['domain_name']
        code_type = request.form['code_type']
        file_name = create_project_docx(domain_name, code_type)
        return send_file(file_name, as_attachment=True)

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
